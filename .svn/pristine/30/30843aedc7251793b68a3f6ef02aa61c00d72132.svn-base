import java.io.Serializable;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.stream.Collectors;

public class GameInfo implements Serializable {
    private static final long serialVersionUID = 3L;
    private String gameState;
    private int globalId;
    private int mazeSize;
    private int treasureNumber;
    private LinkedList<ClientInterface> backupServerQueue;
    private Map<Integer, PlayerInfo> playerInfos;
    private Map<Position, Integer> treasureInfo;

    public GameInfo(int mazeSize, int treasureNumber) {
        this.gameState = "OVER";
        this.globalId = 1;
        this.mazeSize = mazeSize;
        this.treasureNumber = treasureNumber;
        this.backupServerQueue = new LinkedList<>();
        this.playerInfos = new HashMap<>();
        this.treasureInfo = new HashMap<>();
    }

    public String getGameState() {
        return gameState;
    }

    public synchronized int getGlobalId() {
        int currentId = globalId;
        globalId++;
        return currentId;
    }

    public void generateTreasures() {
        for (int i = 0; i < treasureNumber; i++) {
            Position position = new Position(mazeSize);
            if (treasureInfo.containsKey(position)) {
                treasureInfo.put(position, treasureInfo.get(position) + 1);
            } else {
                treasureInfo.put(position, 1);
            }
        }

    }

    public int getMazeSize() {
        return mazeSize;
    }

    public int getTreasureNumber() {
        return treasureNumber;
    }

    public LinkedList<ClientInterface> getBackupServerQueue() {
        return backupServerQueue;
    }

    public Map<Integer, PlayerInfo> getPlayerInfos() {
        return playerInfos;
    }

    public Map<Position, Integer> getTreasureInfo() {
        return treasureInfo;
    }

    public synchronized void setGameState(String gameState) {
        this.gameState = gameState;
    }

    public String backupServerQueueToString() {
       return backupServerQueue.stream().
                map(player -> {
                    try {
                        return player
                                .getPlayerIDAsString();
                    } catch (RemoteException e) {
                        return " ";
                    }
                }).
                collect(Collectors.joining("->"));
    }
    @Override
    public String toString() {
        return "gameState: " + gameState + " " +
                "globalId: " + globalId + " " +
                "mazeSize: " + mazeSize + " " +
                "treasureNumber: " + treasureNumber + " " +
                "backupServer Queue: " +backupServerQueueToString();

    }

}
