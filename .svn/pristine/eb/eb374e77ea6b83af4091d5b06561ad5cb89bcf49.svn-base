/**
 * Created by Quincy on 15/9/9.
 */

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;
import javafx.stage.Screen;
import javafx.stage.Stage;

import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

class TextInfo implements Serializable {
    public String color;
    public String text;

    public TextInfo(String text) {
        this.text = text;
        this.color = "black";
    }

    public TextInfo(String color, String text) {
        this.color = color;
        this.text = text;
    }
}

public class LogWindow extends Application {

    TextFlow textFlow = new TextFlow();
    Map<String, Color> hashMap = new HashMap<>();

    public static void main(String[] args) {
        launch(args);
    }

    private void iniHashMap() {
        hashMap.put("black", Color.BLACK);
        hashMap.put("blue", Color.BLUE);
        hashMap.put("red", Color.RED);
        hashMap.put("green", Color.GREEN);
        hashMap.put("gold", Color.GOLD);
        hashMap.put("brown", Color.BROWN);
        hashMap.put("violet", Color.VIOLET);
        hashMap.put("pink", Color.PINK);
        hashMap.put("magenta", Color.MAGENTA);
        hashMap.put("grey", Color.GREY);
        hashMap.put("dark", Color.DARKKHAKI);

    }

    private void startThread() throws IOException {
        ServerSocket serverSocket = new ServerSocket(8081);
        while (true) {
            Socket socket = serverSocket.accept();
            new Thread() {
                @Override
                public void run() {
                    try {
                        ObjectInput scanner = new ObjectInputStream(socket.getInputStream());
                        TextInfo textInfo = (TextInfo) scanner.readObject();
                        Text text = new Text(textInfo.text);
                        text.setFill(hashMap.get(textInfo.color));
                        Platform.runLater(() -> textFlow.getChildren().add(text));
                        scanner.close();
                        socket.close();
                    } catch (IOException | ClassNotFoundException e) {
                        e.printStackTrace();
                    }

                }
            }.start();


        }
    }

    @Override
    public void start(Stage primaryStage) throws IOException {
        iniHashMap();
        StackPane stackPane = new StackPane(new ScrollPane(textFlow));
        new Thread(() -> {
            try {
                startThread();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        Rectangle2D rectangle2D = Screen.getPrimary().getBounds();
        Scene scene = new Scene(stackPane);
        primaryStage.setScene(scene);
        primaryStage.setWidth(rectangle2D.getWidth());
        primaryStage.setHeight(rectangle2D.getHeight());
        primaryStage.show();
    }


}
