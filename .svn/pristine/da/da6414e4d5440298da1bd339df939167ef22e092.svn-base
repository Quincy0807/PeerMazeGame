import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Random;

public class PlayerRole extends Super implements ClientInterface {
    private ServerRole serverRole;
    private StartGameController startGameController;
    private transient Stage stage;
    private int playerID;

    public PlayerRole(Stage stage) throws IOException {
        this.stage = stage;
        UnicastRemoteObject.exportObject(this, randomPort());
    }

    public ServerRole getServerRole() {
        return serverRole;
    }

    public int getPlayerID() {
        return playerID;
    }

    @Override
    public String getPlayerIDAsString() {
        return "player-" + playerID;
    }

    @Override
    public void setPlayerID(int playerID) {
        this.playerID = playerID;
    }

    public void setServerRole(ServerRole serverRole) {
        this.serverRole = serverRole;
    }

    public void bindPrimaryServerWithPlayer() {
        ServerRole server = serverRole;
        this.setRole(primaryServer);
        this.setPlayerInfo(server.recordSelfAsFirstPlayer(this));
    }

    public void initializedUI() {
        this.stage.setOnCloseRequest(windowEvent -> System.exit(0));
        FXMLLoader fxmlLoader;
        try {
            fxmlLoader = new FXMLLoader(getClass().getResource("start_game_layout.fxml"));
            Parent root = fxmlLoader.load();
            this.stage.setTitle("Join A Game");
            this.stage.setScene(new Scene(root, 300, 275));
            this.startGameController = fxmlLoader.getController();
            this.startGameController.setPlayer(this);
            if (getRole() == null || !getRole().equals(primaryServer)) {
                stage.show();
            }
        } catch (IOException e) {
            log("error during start_game_layout initialization");
        }
    }
    @Override
    public void showStage() {
        Platform.runLater(() -> {
            try {
                startGameController.showGameUI(stage, new ExchangeData(getGameInfo(), getPlayerInfo()));
            } catch (IOException e) {
                log("error during game_layout initialization");
            }
        });
    }



    private int randomPort() {
        int max = 9999;
        int min = 9100;
        Random random = new Random();
        return random.nextInt(max - min + 1) + min;
    }

    @Override
    public String toString() {
        return getPlayerIDAsString() + ": " + getRole();
    }

    @Override
    public void rivalNotification(ExchangeData exchangeData) throws RemoteException {
        setGameInfo(exchangeData.getGameInfo());
        log("backupServer Queue updating: " + getGameInfo().backupServerQueueToString());
        startGameController.drawRival(exchangeData);
    }

    @Override
    public void startMazeGame() throws RemoteException {
        startGameController.startMazeGame();
    }

    @Override
    public void terminateMazeGame() throws RemoteException {
        startGameController.terminateGame();
    }

    @Override
    public void setPlayerRole(String role) throws RemoteException {
        this.setRole(role);
    }

    @Override
    public void setGameInfo(GameInfo gameInfo) {
        super.setGameInfo(gameInfo);
    }

    @Override
    public ExchangeData becomeServer() throws RemoteException {
        //      ServerRole serverRole = new ServerRole(
        //                      new ExchangeData(player.getGameInfo(),player.getPlayerInfo()));
        //      serverRole.getGameInfo().setServer(serverRole);
        //      player.setRole(Super.PrimaryServer);
        //      RemoveMyself();
        //      SetTheServerObject to him is its not set yet or just return the Exchnage data
        //           do
        //           {
        //              try{
        //                  PlayerInfo nextBackUp = GetNextBackup();
        //                  nextBackup.becomeBackUpServer(exchangeData, super.BackUpServer);
        //
        //              Timer timer=new Timer();
        //              timer.scheduleAtFixedRate(()->{
        //                  if(!this.ping(nextBackup)){
        //                      do{
        //                          try{
        //                              PlayerInfo nextBackUp = GetNextBackup();
        //                              nextBackup.becomeBackUpServer(exchangeData);
        //                              break;
        //                          }
        //                          catch(RemoteException ex){
        //                              continue;
        //                          }
        //                      }
        //                      while(backupPlayerQueue <> 0)
        //                  }
        //              },1000*10,1000*30);
        //
        //                  break;
        //              }
        //              catch(RemoteException ex)
        //                  continue;
        //              }
        //            }
        //            while(backupPlayerQueue <> 0)
        return new ExchangeData(getGameInfo(),getPlayerInfo());
    }

    @Override
    public ExchangeData synchronizeGameState(ExchangeData exchangeData) throws RemoteException {
        //TODO: 2. Implement the self updtae of gmae state
        //UpdateRole();
        return null;
        //Start Ping
    }

    @Override
    public ExchangeData becomeBackUpServer(ExchangeData exchangeData) throws RemoteException {
        return null;
        //Start Ping
        //      Timer timer=new Timer();
        //              timer.scheduleAtFixedRate(()->{
        //                  if(!this.ping(exchangeData.getGameInfo().getServer())){
        //                      do{
        //                          try{
        //                              this.becomeServer();
        //                              timer.stop();
        //                              break;
        //                          }
        //                          catch(RemoteException ex){
        //                              continue;
        //                          }
        //                      }
        //                      while(backupPlayerQueue <> 0)
        //                  }
        //              },1000*10,1000*30);
    }

}
