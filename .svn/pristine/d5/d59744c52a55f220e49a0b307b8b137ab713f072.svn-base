import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Rectangle2D;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.stage.Screen;
import javafx.stage.Stage;

import java.io.IOException;
import java.rmi.Naming;
import java.rmi.NotBoundException;

public class StartGameController {
    @FXML
    private Button joinButton;
    @FXML
    private TextField serverAddress;

    private PlayerState playerState;
    private GameController gameController;
    private ClientInterface player;
    private ServerInterface remoteServer;

    private int port;

    public void setPlayer(ClientInterface player) {
        this.player = player;
    }

    public void setPlayerState(PlayerState playerState) {
        this.playerState = playerState;
    }

    @FXML
    private void joinGame(ActionEvent actionEvent) throws IOException, NotBoundException {
        String address=serverAddress.getText();
        if (address.equals("")){
            address="127.0.0.1";
        }

        remoteServer = (ServerInterface) Naming.lookup("rmi://"+address+":9090/server");
        remoteServer.joinGame(player);
//        playerState.copyValueFrom(remoteServer.joinGame(Inet4Address.getLocalHost().getHostAddress(), port));
//        if (playerState.getGameState().equals("START")) {
            showGameUI();
//        } else {
//            Alert alert = new Alert(Alert.AlertType.ERROR);
//            alert.setTitle("Error!");
//            alert.setHeaderText("You can't join the game");
//            alert.setContentText("The Game Has Started!!");
//            alert.showAndWait();
//        }
    }

    public void setPort(int port) {
        this.port = port;
    }

    private void showGameUI() throws IOException {
        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("game_layout.fxml"));
        Parent root = fxmlLoader.load();
        gameController = fxmlLoader.getController();
        gameController.setRemoteServer(remoteServer);
        gameController.setStartGameScene(joinButton.getScene());
//        gameController.setPlayerState(playerState);
        Stage stage = (Stage) joinButton.getScene().getWindow();
//        stage.setWidth(playerState.getMazeSize() * 50 + 150);
//        stage.setHeight(playerState.getMazeSize() * 50 + 22);
        stage.setScene(new Scene(root));
        stage.setTitle("MAZE"+"  "+port);
        Rectangle2D rectangle2D= Screen.getPrimary().getVisualBounds();
        stage.setX((rectangle2D.getWidth()-stage.getWidth())/2);
        stage.setY((rectangle2D.getHeight()-stage.getHeight())/2);
        stage.show();
    }


    public void drawRival(PlayerState rivalState) {
        gameController.drawPlayer(rivalState, "RIVAL");
    }

    public void startMazeGame() {
        gameController.startMazeGame();
    }

    public void terminateGame(){
        Platform.runLater(gameController::terminateGame);

    }

}
