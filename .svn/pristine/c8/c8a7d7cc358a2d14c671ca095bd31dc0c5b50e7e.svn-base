import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.rmi.AlreadyBoundException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Arrays;

/**
 * Created by Quincy on 15/9/3.
 */
public class Peer {
    private Stage stage;
    private ServerRole serverRole;
    private PlayerRole playerRole;
    private String serverAddress = "127.0.0.1";
    private int serverPort = 9090;
    private String lookupName = "primaryServer";


    public Peer(Stage stage,int mazeSize,int treasureNumber) throws IOException, AlreadyBoundException {
        this.stage = stage;
        playerRole = new PlayerRole();
        if (startAsPrimaryServer()) {
            serverRole = new ServerRole(mazeSize,treasureNumber);
            ServerInterface stub = (ServerInterface) UnicastRemoteObject.exportObject(serverRole, 0);
            Registry registry = LocateRegistry.createRegistry(serverPort);
            registry.bind(lookupName, stub);
            System.out.println("Primary Server Starts at " + serverAddress + ":" + serverPort);
        } else {
            System.out.println("Normal Player");
        }
        Parent root = FXMLLoader.load(getClass().getResource("start_game_layout.fxml"));
        this.stage.setTitle("Join A Game");
        this.stage.setScene(new Scene(root, 300, 275));
        this.stage.setOnCloseRequest(windowEvent -> System.exit(0));
        this.stage.show();



    }

    private boolean startAsPrimaryServer() {
        ServerSocket socket=null;
        try {
            String hostname = Inet4Address.getLocalHost().getHostName();
            if (Arrays.stream(Inet4Address.getAllByName(hostname)).map(InetAddress::getHostAddress).anyMatch(host->host.equals(serverAddress)))
            {
                return false;
            }else{
                socket = new ServerSocket(serverPort);
            }
        } catch (IOException e) {

            return false;
        }
        try {
            socket.close();
        } catch (IOException e) {

        }
        return true;
    }

}
