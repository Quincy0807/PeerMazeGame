import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.Random;

public class PlayerRole extends Super implements ClientInterface {
    private ServerInterface serverRole;
    private StartGameController startGameController;
    private transient Stage stage;
    private int playerID;

    public PlayerRole(Stage stage) throws IOException {
        this.stage = stage;
        UnicastRemoteObject.exportObject(this, randomPort());
    }

    public ServerInterface getServerRole() {
        return serverRole;
    }

    public int getPlayerID() {
        return playerID;
    }

    @Override
    public String getPlayerIDAsString() {
        return "player-" + playerID;
    }

    @Override
    public void setPlayerID(int playerID) {
        this.playerID = playerID;
    }

    public void setServerRole(ServerRole serverRole) {
        this.serverRole = serverRole;
    }

    public void bindPrimaryServerWithPlayer() {
        ServerInterface server = serverRole;
        this.setRole(primaryServer);
        try {
            this.setPlayerInfo(server.recordSelfAsFirstPlayer(this));
        } catch (RemoteException e) {
            log("never reach this line(PlayerRole-bindPrimaryServerWithPlayer)");
        }
    }

    public void initializedUI() {
        this.stage.setOnCloseRequest(windowEvent -> System.exit(0));
        FXMLLoader fxmlLoader;
        try {
            fxmlLoader = new FXMLLoader(getClass().getResource("start_game_layout.fxml"));
            Parent root = fxmlLoader.load();
            this.stage.setTitle("Join A Game");
            this.stage.setScene(new Scene(root, 300, 275));
            this.startGameController = fxmlLoader.getController();
            this.startGameController.setPlayer(this);
            if (getRole() == null || !getRole().equals(primaryServer)) {
                stage.show();
            }
        } catch (IOException e) {
            log("error during start_game_layout initialization");
        }
    }

    @Override
    public void showStage() {
        Platform.runLater(() -> {
            try {
                startGameController.showGameUI(stage, new ExchangeData(getGameInfo(), getPlayerInfo()));
            } catch (IOException e) {
                log("error during game_layout initialization");
            }
        });
    }


    private int randomPort() {
        int max = 9999;
        int min = 9100;
        Random random = new Random();
        return random.nextInt(max - min + 1) + min;
    }

    @Override
    public String toString() {
        return getPlayerIDAsString() + " : " + getRole();
    }

    @Override
    public void rivalNotification(ExchangeData exchangeData) throws RemoteException {
        setGameInfo(exchangeData.getGameInfo());
        log("backupServer Queue updating: " + getGameInfo().backupServerQueueToString());
        startGameController.drawRival(exchangeData);
    }

    @Override
    public void startMazeGame(ExchangeData exchangeData) throws RemoteException {
        startGameController.startMazeGame(exchangeData);
    }

    @Override
    public void terminateMazeGame() throws RemoteException {
        startGameController.terminateGame();
    }

    @Override
    public void setPlayerRole(String role) throws RemoteException {
        this.setRole(role);
    }

    @Override
    public void setGameInfo(GameInfo gameInfo) {
        super.setGameInfo(gameInfo);
    }

    @Override
    public ExchangeData becomeServer(ExchangeData inData) throws RemoteException {
        ExchangeData exchangeData;
        if (getRole().equals(Super.primaryServer)) {
            log("I am already the primary server");
            return new ExchangeData(this.getGameInfo(),this.getPlayerInfo());
        }else {
            /** if it is the backup server, it already has the latest information**/
            if (getRole().equals(Super.backupServer)) {
                exchangeData = new ExchangeData(getGameInfo(), getPlayerInfo());
            } else {
                /** if it is the normal player, it should get the latest information from others**/
                exchangeData = inData;
                this.setExchangeData(inData);
            }
        }
        setRole(Super.primaryServer);
        Platform.runLater(() -> stage.setTitle("MAZE GAME: " + this));
        ServerRole serverRole = new ServerRole(exchangeData);
        this.serverRole = serverRole;
        this.startGameController.getGameController().setRemoteServer(serverRole);
        serverRole.getGameInfo().setServer((ServerInterface) UnicastRemoteObject.exportObject(serverRole,0));
        log("pick up a new backup server");
        //      SetTheServerObject to him is its not set yet or just return the Exchnage data
        do {
            ClientInterface nextBackup = null;
            try {
                nextBackup = getGameInfo().tryToGetNextBackupServer();
                nextBackup.becomeBackUpServer(exchangeData);
                log(nextBackup.getPlayerIDAsString() + " becomes new backup server");
                //
                //              Timer timer=new Timer();
                //              timer.scheduleAtFixedRate(()->{
                //                  if(!this.ping(nextBackup)){
                //                      do{
                //                          try{
                //                              PlayerInfo nextBackUp = GetNextBackup();
                //                              nextBackup.becomeBackUpServer(exchangeData);
                //                              break;
                //                          }
                //                          catch(RemoteException ex){
                //                              continue;
                //                          }
                //                      }
                //                      while(backupPlayerQueue <> 0)
                //                  }
                //              },1000*10,1000*30);
                //
                break;
            } catch (RemoteException ex) {
                log("player-" + getGameInfo().returnIdByRemoteObject(nextBackup) + " crashed too");
            }
        }
        while (getGameInfo().queueSize() != 0);
        if (getGameInfo().queueSize() == 0) {
            log("*\n*\n*\n*\n*\n*\n*\n*" +
                    "this line(PlayerRole-becomeServer()) should not be reached.\n " +
                    "BackupServer queue is empty!!" +
                    "*\n*\n*\n*\n*\n*\n*\n*");
        }
        return new ExchangeData(getGameInfo(), getPlayerInfo());
    }


    @Override
    public void synchronizeGameState(ExchangeData exchangeData) throws RemoteException {
        //TODO: 2. Implement the self updtae of gmae state
        //UpdateRole();
        setGameInfo(exchangeData.getGameInfo());
        log("backup server synchronized with the primary server\n" +
                "current game information:" + getGameInfo());
        //Start Ping
    }

    @Override
    public void becomeBackUpServer(ExchangeData exchangeData) throws RemoteException {
        setPlayerRole(Super.backupServer);
        Platform.runLater(() -> stage.setTitle("Maze Game: " + this));
        log(getPlayerIDAsString() + " now becomes " + getRole());
        setGameInfo(exchangeData.getGameInfo());
        startGameController.getGameController().setRemoteServer(exchangeData.getGameInfo().getServer());
        this.serverRole = exchangeData.getGameInfo().getServer();
        log("backup server synchronized with the primary server\n" +
                "current game information:" + getGameInfo());

        //Start Ping
        //      Timer timer=new Timer();
        //              timer.scheduleAtFixedRate(()->{
        //                  if(!this.ping(exchangeData.getGameInfo().getServer())){
        //                      do{
        //                          try{
        //                              this.becomeServer();
        //                              timer.stop();
        //                              break;
        //                          }
        //                          catch(RemoteException ex){
        //                              continue;
        //                          }
        //                      }
        //                      while(backupPlayerQueue <> 0)
        //                  }
        //              },1000*10,1000*30);
    }

}
